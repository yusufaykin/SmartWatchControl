import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.whiteA700,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20.h),
          ),
          shadowColor: appTheme.tealA70033,
          elevation: 8,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyMedium: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 13.fSize,
          fontFamily: 'Rambla',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 10.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        displayLarge: TextStyle(
          color: appTheme.lightBlue400,
          fontSize: 62.fSize,
          fontFamily: 'Esteban',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: appTheme.lightBlue400,
          fontSize: 36.fSize,
          fontFamily: 'DM Sans',
          fontWeight: FontWeight.w700,
        ),
        headlineLarge: TextStyle(
          color: appTheme.lightBlue400,
          fontSize: 30.fSize,
          fontFamily: 'DM Sans',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 12.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: colorScheme.primaryContainer,
          fontSize: 20.fSize,
          fontFamily: 'DM Sans',
          fontWeight: FontWeight.w400,
        ),
        titleMedium: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 18.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 15.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF39A4E1),
    primaryContainer: Color(0X7E2C2929),
    secondaryContainer: Color(0XFF699BF7),

    // Error colors
    errorContainer: Color(0XFE0E92B7),
    onError: Color(0XFF72C850),

    // On colors(text colors)
    onPrimary: Color(0XD81E1E1E),
    onPrimaryContainer: Color(0XFFDEE9F5),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blue300 => Color(0XFF58B6EB);
  Color get blue400 => Color(0XFF52ACFF);

  // BlueGrayb
  Color get blueGray7009b => Color(0X9B4E4E72);

  // BlueGray
  Color get blueGray800 => Color(0XFF2E3A59);

  // Cyan
  Color get cyan300 => Color(0XFF58D9EB);

  // CyanFe
  Color get cyan400Fe => Color(0XFE2DA8CB);

  // DeepOrangeAf
  Color get deepOrangeA4003f => Color(0X3FFF2107);

  // Gray
  Color get gray400 => Color(0XFFBDBDBD);
  Color get gray50 => Color(0XFFF8F8F8);
  Color get gray5001 => Color(0XFFFAFAFA);
  Color get gray70019 => Color(0X19606470);
  Color get gray800 => Color(0XFF424242);
  Color get gray80001 => Color(0XFF464646);

  // Indigo
  Color get indigo300 => Color(0XFF7BA7D7);

  // LightBlue
  Color get lightBlue400 => Color(0XFF29B6F6);
  Color get lightBlueA100 => Color(0XFF66D8FC);

  // Lime
  Color get lime500 => Color(0XFFB6E13D);

  // Redf
  Color get red4003f => Color(0X3FF55A4C);

  // Red
  Color get redA100 => Color(0XFFFB857A);

  // RedAf
  Color get redA1003f => Color(0X3FFF8383);

  // TealD
  Color get teal200D8 => Color(0XD877AECD);

  // Teal
  Color get teal300 => Color(0XFF5AAFCE);
  Color get teal500 => Color(0XFF06B681);
  Color get tealA70033 => Color(0X3310D297);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
